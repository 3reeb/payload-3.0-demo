{"version":3,"sources":["../../../src/bin/register/register.ts"],"sourcesContent":["import type { Options } from '@swc-node/core'\n\nimport { transform, transformSync } from '@swc-node/core'\nimport { SourcemapMap, installSourceMapSupport } from '@swc-node/sourcemap-support'\nimport { getTsconfig } from 'get-tsconfig'\nimport { platform } from 'os'\nimport { resolve } from 'path'\nimport { addHook } from 'pirates'\nimport * as ts from 'typescript'\n\nimport { tsCompilerOptionsToSwcConfig } from './read-default-tsconfig.js'\n\nconst DEFAULT_EXTENSIONS = ['.js', '.jsx', '.es6', '.es', '.mjs', '.ts', '.tsx']\nconst PLATFORM = platform()\n\nconst injectInlineSourceMap = ({\n  code,\n  filename,\n  map,\n}: {\n  code: string\n  filename: string\n  map: string | undefined\n}): string => {\n  if (map) {\n    SourcemapMap.set(filename, map)\n    const base64Map = Buffer.from(map, 'utf8').toString('base64')\n    const sourceMapContent = `//# sourceMappingURL=data:application/json;charset=utf-8;base64,${base64Map}`\n    return `${code}\\n${sourceMapContent}`\n  }\n  return code\n}\n\nexport function compile(\n  sourcecode: string,\n  filename: string,\n  options: ts.CompilerOptions & { fallbackToTs?: (filename: string) => boolean },\n): string\n\nexport function compile(\n  sourcecode: string,\n  filename: string,\n  options: ts.CompilerOptions & { fallbackToTs?: (filename: string) => boolean },\n  async: false,\n): string\n\nexport function compile(\n  sourcecode: string,\n  filename: string,\n  options: ts.CompilerOptions & { fallbackToTs?: (filename: string) => boolean },\n  async: true,\n): Promise<string>\n\nexport function compile(\n  sourcecode: string,\n  filename: string,\n  options: ts.CompilerOptions & { fallbackToTs?: (filename: string) => boolean },\n  async: boolean,\n): Promise<string> | string\n\nexport function compile(\n  sourcecode: string,\n  filename: string,\n  options: ts.CompilerOptions & { fallbackToTs?: (filename: string) => boolean },\n  async = false,\n) {\n  if (filename.endsWith('.d.ts')) {\n    return ''\n  }\n  if (options.files && (options.files as string[]).length) {\n    if (\n      PLATFORM === 'win32' &&\n      (options.files as string[]).every((file) => filename !== resolve(process.cwd(), file))\n    ) {\n      return sourcecode\n    }\n    if (\n      PLATFORM !== 'win32' &&\n      (options.files as string[]).every((file) => !filename.endsWith(file))\n    ) {\n      return sourcecode\n    }\n  }\n  if (options && typeof options.fallbackToTs === 'function' && options.fallbackToTs(filename)) {\n    delete options.fallbackToTs\n    const { outputText, sourceMapText } = ts.transpileModule(sourcecode, {\n      compilerOptions: options,\n      fileName: filename,\n    })\n    return injectInlineSourceMap({ code: outputText, filename, map: sourceMapText })\n  }\n\n  let swcRegisterConfig: Options\n  if (process.env.SWCRC) {\n    // when SWCRC environment variable is set to true it will use swcrc file\n    swcRegisterConfig = {\n      swc: {\n        swcrc: true,\n      },\n    }\n  } else {\n    swcRegisterConfig = tsCompilerOptionsToSwcConfig(options, filename)\n  }\n\n  if (async) {\n    return transform(sourcecode, filename, swcRegisterConfig).then(({ code, map }) => {\n      return injectInlineSourceMap({ code, filename, map })\n    })\n  } else {\n    const { code, map } = transformSync(sourcecode, filename, swcRegisterConfig)\n    return injectInlineSourceMap({ code, filename, map })\n  }\n}\n\nexport function register(options: Partial<ts.CompilerOptions> = {}, hookOpts = {}) {\n  const locatedConfig = getTsconfig()\n  const tsconfig = locatedConfig.config.compilerOptions as unknown as ts.CompilerOptions\n  options = tsconfig\n  // options.module = ts.ModuleKind.CommonJS\n  installSourceMapSupport()\n  return addHook((code, filename) => compile(code, filename, options), {\n    exts: DEFAULT_EXTENSIONS,\n    ...hookOpts,\n  })\n}\n"],"names":["transform","transformSync","SourcemapMap","installSourceMapSupport","getTsconfig","platform","resolve","addHook","ts","tsCompilerOptionsToSwcConfig","DEFAULT_EXTENSIONS","PLATFORM","injectInlineSourceMap","code","filename","map","set","base64Map","Buffer","from","toString","sourceMapContent","compile","sourcecode","options","async","endsWith","files","length","every","file","process","cwd","fallbackToTs","outputText","sourceMapText","transpileModule","compilerOptions","fileName","swcRegisterConfig","env","SWCRC","swc","swcrc","then","register","hookOpts","locatedConfig","tsconfig","config","exts"],"mappings":"AAEA,SAASA,SAAS,EAAEC,aAAa,QAAQ,iBAAgB;AACzD,SAASC,YAAY,EAAEC,uBAAuB,QAAQ,8BAA6B;AACnF,SAASC,WAAW,QAAQ,eAAc;AAC1C,SAASC,QAAQ,QAAQ,KAAI;AAC7B,SAASC,OAAO,QAAQ,OAAM;AAC9B,SAASC,OAAO,QAAQ,UAAS;AACjC,YAAYC,QAAQ,aAAY;AAEhC,SAASC,4BAA4B,QAAQ,6BAA4B;AAEzE,MAAMC,qBAAqB;IAAC;IAAO;IAAQ;IAAQ;IAAO;IAAQ;IAAO;CAAO;AAChF,MAAMC,WAAWN;AAEjB,MAAMO,wBAAwB,CAAC,EAC7BC,IAAI,EACJC,QAAQ,EACRC,GAAG,EAKJ;IACC,IAAIA,KAAK;QACPb,aAAac,GAAG,CAACF,UAAUC;QAC3B,MAAME,YAAYC,OAAOC,IAAI,CAACJ,KAAK,QAAQK,QAAQ,CAAC;QACpD,MAAMC,mBAAmB,CAAC,gEAAgE,EAAEJ,UAAU,CAAC;QACvG,OAAO,CAAC,EAAEJ,KAAK,EAAE,EAAEQ,iBAAiB,CAAC;IACvC;IACA,OAAOR;AACT;AA6BA,OAAO,SAASS,QACdC,UAAkB,EAClBT,QAAgB,EAChBU,OAA8E,EAC9EC,QAAQ,KAAK;IAEb,IAAIX,SAASY,QAAQ,CAAC,UAAU;QAC9B,OAAO;IACT;IACA,IAAIF,QAAQG,KAAK,IAAI,AAACH,QAAQG,KAAK,CAAcC,MAAM,EAAE;QACvD,IACEjB,aAAa,WACb,AAACa,QAAQG,KAAK,CAAcE,KAAK,CAAC,CAACC,OAAShB,aAAaR,QAAQyB,QAAQC,GAAG,IAAIF,QAChF;YACA,OAAOP;QACT;QACA,IACEZ,aAAa,WACb,AAACa,QAAQG,KAAK,CAAcE,KAAK,CAAC,CAACC,OAAS,CAAChB,SAASY,QAAQ,CAACI,QAC/D;YACA,OAAOP;QACT;IACF;IACA,IAAIC,WAAW,OAAOA,QAAQS,YAAY,KAAK,cAAcT,QAAQS,YAAY,CAACnB,WAAW;QAC3F,OAAOU,QAAQS,YAAY;QAC3B,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAE,GAAG3B,GAAG4B,eAAe,CAACb,YAAY;YACnEc,iBAAiBb;YACjBc,UAAUxB;QACZ;QACA,OAAOF,sBAAsB;YAAEC,MAAMqB;YAAYpB;YAAUC,KAAKoB;QAAc;IAChF;IAEA,IAAII;IACJ,IAAIR,QAAQS,GAAG,CAACC,KAAK,EAAE;QACrB,wEAAwE;QACxEF,oBAAoB;YAClBG,KAAK;gBACHC,OAAO;YACT;QACF;IACF,OAAO;QACLJ,oBAAoB9B,6BAA6Be,SAASV;IAC5D;IAEA,IAAIW,OAAO;QACT,OAAOzB,UAAUuB,YAAYT,UAAUyB,mBAAmBK,IAAI,CAAC,CAAC,EAAE/B,IAAI,EAAEE,GAAG,EAAE;YAC3E,OAAOH,sBAAsB;gBAAEC;gBAAMC;gBAAUC;YAAI;QACrD;IACF,OAAO;QACL,MAAM,EAAEF,IAAI,EAAEE,GAAG,EAAE,GAAGd,cAAcsB,YAAYT,UAAUyB;QAC1D,OAAO3B,sBAAsB;YAAEC;YAAMC;YAAUC;QAAI;IACrD;AACF;AAEA,OAAO,SAAS8B,SAASrB,UAAuC,CAAC,CAAC,EAAEsB,WAAW,CAAC,CAAC;IAC/E,MAAMC,gBAAgB3C;IACtB,MAAM4C,WAAWD,cAAcE,MAAM,CAACZ,eAAe;IACrDb,UAAUwB;IACV,0CAA0C;IAC1C7C;IACA,OAAOI,QAAQ,CAACM,MAAMC,WAAaQ,QAAQT,MAAMC,UAAUU,UAAU;QACnE0B,MAAMxC;QACN,GAAGoC,QAAQ;IACb;AACF"}