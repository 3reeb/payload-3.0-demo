{"version":3,"sources":["../../../src/bin/register/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/unbound-method */\nimport { getTsconfig } from 'get-tsconfig'\nimport path from 'path'\nimport ts from 'typescript'\nimport { fileURLToPath, pathToFileURL } from 'url'\n\nimport { CLIENT_EXTENSIONS } from './clientExtensions.js'\nimport { compile } from './register.js'\n\ninterface ResolveContext {\n  conditions: string[]\n  parentURL: string | undefined\n}\ninterface ResolveResult {\n  format?: string\n  shortCircuit?: boolean\n  url: string\n}\ntype ResolveArgs = [\n  specifier: string,\n  context?: ResolveContext,\n  nextResolve?: (...args: ResolveArgs) => Promise<ResolveResult>,\n]\ntype ResolveFn = (...args: Required<ResolveArgs>) => Promise<ResolveResult>\n\nconst locatedConfig = getTsconfig()\nconst tsconfig = locatedConfig.config.compilerOptions as unknown as ts.CompilerOptions\n\ntsconfig.module = ts.ModuleKind.ESNext\ntsconfig.moduleResolution = ts.ModuleResolutionKind.NodeNext\n\nconst moduleResolutionCache = ts.createModuleResolutionCache(\n  ts.sys.getCurrentDirectory(),\n  (x) => x,\n  tsconfig,\n)\nconst host: ts.ModuleResolutionHost = {\n  fileExists: ts.sys.fileExists,\n  readFile: ts.sys.readFile,\n}\nconst EXTENSIONS: string[] = [ts.Extension.Ts, ts.Extension.Tsx, ts.Extension.Dts, ts.Extension.Mts]\n\nexport const resolve: ResolveFn = async (specifier, context, nextResolve) => {\n  const isTS = EXTENSIONS.some((ext) => specifier.endsWith(ext))\n  const isClient = CLIENT_EXTENSIONS.some((ext) => specifier.endsWith(ext))\n\n  if (isClient) {\n    const nextResult = await nextResolve(specifier, context, nextResolve)\n    const specifierSegments = specifier.split('.')\n\n    return {\n      format: '.' + specifierSegments[specifierSegments.length - 1],\n      shortCircuit: true,\n      url: nextResult.url,\n    }\n  }\n\n  // entrypoint\n  if (!context.parentURL) {\n    return {\n      format: isTS ? 'ts' : undefined,\n      shortCircuit: true,\n      url: specifier,\n    }\n  }\n\n  // import/require from external library\n  if (context.parentURL.includes('/node_modules/') && !isTS) {\n    return nextResolve(specifier)\n  }\n\n  const { resolvedModule } = ts.resolveModuleName(\n    specifier,\n    fileURLToPath(context.parentURL),\n    tsconfig,\n    host,\n    moduleResolutionCache,\n  )\n\n  // import from local project to local project TS file\n  if (\n    resolvedModule &&\n    !resolvedModule.resolvedFileName.includes('/node_modules/') &&\n    EXTENSIONS.includes(resolvedModule.extension)\n  ) {\n    return {\n      format: 'ts',\n      shortCircuit: true,\n      url: pathToFileURL(resolvedModule.resolvedFileName).href,\n    }\n  }\n\n  // import from local project to either:\n  // - something TS couldn't resolve\n  // - external library\n  // - local project non-TS file\n  return nextResolve(specifier)\n}\n\ninterface LoadContext {\n  conditions: string[]\n  format: null | string | undefined\n}\ninterface LoadResult {\n  format: string\n  shortCircuit?: boolean\n  source: ArrayBuffer | SharedArrayBuffer | Uint8Array | string\n}\ntype LoadArgs = [\n  url: string,\n  context: LoadContext,\n  nextLoad?: (...args: LoadArgs) => Promise<LoadResult>,\n]\ntype LoadFn = (...args: Required<LoadArgs>) => Promise<LoadResult>\n\nconst swcOptions = {\n  ...tsconfig,\n  baseUrl: path.resolve(''),\n  paths: undefined,\n}\n\nif (tsconfig.paths) {\n  swcOptions.paths = tsconfig.paths\n  if (tsconfig.baseUrl) {\n    swcOptions.baseUrl = path.resolve(tsconfig.baseUrl)\n  }\n}\n\nexport const load: LoadFn = async (url, context, nextLoad) => {\n  if (CLIENT_EXTENSIONS.some((e) => context.format === e)) {\n    const rawSource = '{}'\n\n    return {\n      format: 'json',\n      shortCircuit: true,\n      source: rawSource,\n    }\n  }\n\n  if (context.format === 'ts') {\n    const { source } = await nextLoad(url, context)\n    const code = typeof source === 'string' ? source : Buffer.from(source).toString()\n    const compiled = await compile(code, fileURLToPath(url), swcOptions, true)\n    return {\n      format: 'module',\n      shortCircuit: true,\n      source: compiled,\n    }\n  } else {\n    return nextLoad(url, context)\n  }\n}\n"],"names":["getTsconfig","path","ts","fileURLToPath","pathToFileURL","CLIENT_EXTENSIONS","compile","locatedConfig","tsconfig","config","compilerOptions","module","ModuleKind","ESNext","moduleResolution","ModuleResolutionKind","NodeNext","moduleResolutionCache","createModuleResolutionCache","sys","getCurrentDirectory","x","host","fileExists","readFile","EXTENSIONS","Extension","Ts","Tsx","Dts","Mts","resolve","specifier","context","nextResolve","isTS","some","ext","endsWith","isClient","nextResult","specifierSegments","split","format","length","shortCircuit","url","parentURL","undefined","includes","resolvedModule","resolveModuleName","resolvedFileName","extension","href","swcOptions","baseUrl","paths","load","nextLoad","e","rawSource","source","code","Buffer","from","toString","compiled"],"mappings":"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"}